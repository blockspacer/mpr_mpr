// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mprmpr/file_system/file_system.proto

#ifndef PROTOBUF_mprmpr_2ffile_5fsystem_2ffile_5fsystem_2eproto__INCLUDED
#define PROTOBUF_mprmpr_2ffile_5fsystem_2ffile_5fsystem_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace ant {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_mprmpr_2ffile_5fsystem_2ffile_5fsystem_2eproto();
void protobuf_AssignDesc_mprmpr_2ffile_5fsystem_2ffile_5fsystem_2eproto();
void protobuf_ShutdownFile_mprmpr_2ffile_5fsystem_2ffile_5fsystem_2eproto();

class InstanceMetadataPB;
class PathSetPB;
class PathInstanceMetadataPB;
class BlockIdPB;
class BlockRecordPB;

enum BlockRecordType {
  UNKNOWN = 0,
  CREATE = 1,
  DELETE = 2
};
bool BlockRecordType_IsValid(int value);
const BlockRecordType BlockRecordType_MIN = UNKNOWN;
const BlockRecordType BlockRecordType_MAX = DELETE;
const int BlockRecordType_ARRAYSIZE = BlockRecordType_MAX + 1;

const ::google::protobuf::EnumDescriptor* BlockRecordType_descriptor();
inline const ::std::string& BlockRecordType_Name(BlockRecordType value) {
  return ::google::protobuf::internal::NameOfEnum(
    BlockRecordType_descriptor(), value);
}
inline bool BlockRecordType_Parse(
    const ::std::string& name, BlockRecordType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BlockRecordType>(
    BlockRecordType_descriptor(), name, value);
}
// ===================================================================

class InstanceMetadataPB : public ::google::protobuf::Message {
 public:
  InstanceMetadataPB();
  virtual ~InstanceMetadataPB();

  InstanceMetadataPB(const InstanceMetadataPB& from);

  inline InstanceMetadataPB& operator=(const InstanceMetadataPB& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InstanceMetadataPB& default_instance();

  void Swap(InstanceMetadataPB* other);

  // implements Message ----------------------------------------------

  InstanceMetadataPB* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InstanceMetadataPB& from);
  void MergeFrom(const InstanceMetadataPB& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes uuid = 1;
  inline bool has_uuid() const;
  inline void clear_uuid();
  static const int kUuidFieldNumber = 1;
  inline const ::std::string& uuid() const;
  inline void set_uuid(const ::std::string& value);
  inline void set_uuid(const char* value);
  inline void set_uuid(const void* value, size_t size);
  inline ::std::string* mutable_uuid();
  inline ::std::string* release_uuid();
  inline void set_allocated_uuid(::std::string* uuid);

  // required string format_stamp = 2;
  inline bool has_format_stamp() const;
  inline void clear_format_stamp();
  static const int kFormatStampFieldNumber = 2;
  inline const ::std::string& format_stamp() const;
  inline void set_format_stamp(const ::std::string& value);
  inline void set_format_stamp(const char* value);
  inline void set_format_stamp(const char* value, size_t size);
  inline ::std::string* mutable_format_stamp();
  inline ::std::string* release_format_stamp();
  inline void set_allocated_format_stamp(::std::string* format_stamp);

  // @@protoc_insertion_point(class_scope:ant.InstanceMetadataPB)
 private:
  inline void set_has_uuid();
  inline void clear_has_uuid();
  inline void set_has_format_stamp();
  inline void clear_has_format_stamp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* uuid_;
  ::std::string* format_stamp_;
  friend void  protobuf_AddDesc_mprmpr_2ffile_5fsystem_2ffile_5fsystem_2eproto();
  friend void protobuf_AssignDesc_mprmpr_2ffile_5fsystem_2ffile_5fsystem_2eproto();
  friend void protobuf_ShutdownFile_mprmpr_2ffile_5fsystem_2ffile_5fsystem_2eproto();

  void InitAsDefaultInstance();
  static InstanceMetadataPB* default_instance_;
};
// -------------------------------------------------------------------

class PathSetPB : public ::google::protobuf::Message {
 public:
  PathSetPB();
  virtual ~PathSetPB();

  PathSetPB(const PathSetPB& from);

  inline PathSetPB& operator=(const PathSetPB& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PathSetPB& default_instance();

  void Swap(PathSetPB* other);

  // implements Message ----------------------------------------------

  PathSetPB* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PathSetPB& from);
  void MergeFrom(const PathSetPB& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes uuid = 1;
  inline bool has_uuid() const;
  inline void clear_uuid();
  static const int kUuidFieldNumber = 1;
  inline const ::std::string& uuid() const;
  inline void set_uuid(const ::std::string& value);
  inline void set_uuid(const char* value);
  inline void set_uuid(const void* value, size_t size);
  inline ::std::string* mutable_uuid();
  inline ::std::string* release_uuid();
  inline void set_allocated_uuid(::std::string* uuid);

  // repeated bytes all_uuids = 2;
  inline int all_uuids_size() const;
  inline void clear_all_uuids();
  static const int kAllUuidsFieldNumber = 2;
  inline const ::std::string& all_uuids(int index) const;
  inline ::std::string* mutable_all_uuids(int index);
  inline void set_all_uuids(int index, const ::std::string& value);
  inline void set_all_uuids(int index, const char* value);
  inline void set_all_uuids(int index, const void* value, size_t size);
  inline ::std::string* add_all_uuids();
  inline void add_all_uuids(const ::std::string& value);
  inline void add_all_uuids(const char* value);
  inline void add_all_uuids(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& all_uuids() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_all_uuids();

  // @@protoc_insertion_point(class_scope:ant.PathSetPB)
 private:
  inline void set_has_uuid();
  inline void clear_has_uuid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* uuid_;
  ::google::protobuf::RepeatedPtrField< ::std::string> all_uuids_;
  friend void  protobuf_AddDesc_mprmpr_2ffile_5fsystem_2ffile_5fsystem_2eproto();
  friend void protobuf_AssignDesc_mprmpr_2ffile_5fsystem_2ffile_5fsystem_2eproto();
  friend void protobuf_ShutdownFile_mprmpr_2ffile_5fsystem_2ffile_5fsystem_2eproto();

  void InitAsDefaultInstance();
  static PathSetPB* default_instance_;
};
// -------------------------------------------------------------------

class PathInstanceMetadataPB : public ::google::protobuf::Message {
 public:
  PathInstanceMetadataPB();
  virtual ~PathInstanceMetadataPB();

  PathInstanceMetadataPB(const PathInstanceMetadataPB& from);

  inline PathInstanceMetadataPB& operator=(const PathInstanceMetadataPB& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PathInstanceMetadataPB& default_instance();

  void Swap(PathInstanceMetadataPB* other);

  // implements Message ----------------------------------------------

  PathInstanceMetadataPB* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PathInstanceMetadataPB& from);
  void MergeFrom(const PathInstanceMetadataPB& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .ant.PathSetPB path_set = 1;
  inline bool has_path_set() const;
  inline void clear_path_set();
  static const int kPathSetFieldNumber = 1;
  inline const ::ant::PathSetPB& path_set() const;
  inline ::ant::PathSetPB* mutable_path_set();
  inline ::ant::PathSetPB* release_path_set();
  inline void set_allocated_path_set(::ant::PathSetPB* path_set);

  // required string block_manager_type = 2;
  inline bool has_block_manager_type() const;
  inline void clear_block_manager_type();
  static const int kBlockManagerTypeFieldNumber = 2;
  inline const ::std::string& block_manager_type() const;
  inline void set_block_manager_type(const ::std::string& value);
  inline void set_block_manager_type(const char* value);
  inline void set_block_manager_type(const char* value, size_t size);
  inline ::std::string* mutable_block_manager_type();
  inline ::std::string* release_block_manager_type();
  inline void set_allocated_block_manager_type(::std::string* block_manager_type);

  // required uint64 filesystem_block_size_bytes = 3;
  inline bool has_filesystem_block_size_bytes() const;
  inline void clear_filesystem_block_size_bytes();
  static const int kFilesystemBlockSizeBytesFieldNumber = 3;
  inline ::google::protobuf::uint64 filesystem_block_size_bytes() const;
  inline void set_filesystem_block_size_bytes(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:ant.PathInstanceMetadataPB)
 private:
  inline void set_has_path_set();
  inline void clear_has_path_set();
  inline void set_has_block_manager_type();
  inline void clear_has_block_manager_type();
  inline void set_has_filesystem_block_size_bytes();
  inline void clear_has_filesystem_block_size_bytes();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::ant::PathSetPB* path_set_;
  ::std::string* block_manager_type_;
  ::google::protobuf::uint64 filesystem_block_size_bytes_;
  friend void  protobuf_AddDesc_mprmpr_2ffile_5fsystem_2ffile_5fsystem_2eproto();
  friend void protobuf_AssignDesc_mprmpr_2ffile_5fsystem_2ffile_5fsystem_2eproto();
  friend void protobuf_ShutdownFile_mprmpr_2ffile_5fsystem_2ffile_5fsystem_2eproto();

  void InitAsDefaultInstance();
  static PathInstanceMetadataPB* default_instance_;
};
// -------------------------------------------------------------------

class BlockIdPB : public ::google::protobuf::Message {
 public:
  BlockIdPB();
  virtual ~BlockIdPB();

  BlockIdPB(const BlockIdPB& from);

  inline BlockIdPB& operator=(const BlockIdPB& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlockIdPB& default_instance();

  void Swap(BlockIdPB* other);

  // implements Message ----------------------------------------------

  BlockIdPB* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlockIdPB& from);
  void MergeFrom(const BlockIdPB& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required fixed64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:ant.BlockIdPB)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 id_;
  friend void  protobuf_AddDesc_mprmpr_2ffile_5fsystem_2ffile_5fsystem_2eproto();
  friend void protobuf_AssignDesc_mprmpr_2ffile_5fsystem_2ffile_5fsystem_2eproto();
  friend void protobuf_ShutdownFile_mprmpr_2ffile_5fsystem_2ffile_5fsystem_2eproto();

  void InitAsDefaultInstance();
  static BlockIdPB* default_instance_;
};
// -------------------------------------------------------------------

class BlockRecordPB : public ::google::protobuf::Message {
 public:
  BlockRecordPB();
  virtual ~BlockRecordPB();

  BlockRecordPB(const BlockRecordPB& from);

  inline BlockRecordPB& operator=(const BlockRecordPB& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlockRecordPB& default_instance();

  void Swap(BlockRecordPB* other);

  // implements Message ----------------------------------------------

  BlockRecordPB* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlockRecordPB& from);
  void MergeFrom(const BlockRecordPB& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .ant.BlockIdPB block_id = 1;
  inline bool has_block_id() const;
  inline void clear_block_id();
  static const int kBlockIdFieldNumber = 1;
  inline const ::ant::BlockIdPB& block_id() const;
  inline ::ant::BlockIdPB* mutable_block_id();
  inline ::ant::BlockIdPB* release_block_id();
  inline void set_allocated_block_id(::ant::BlockIdPB* block_id);

  // required .ant.BlockRecordType op_type = 2;
  inline bool has_op_type() const;
  inline void clear_op_type();
  static const int kOpTypeFieldNumber = 2;
  inline ::ant::BlockRecordType op_type() const;
  inline void set_op_type(::ant::BlockRecordType value);

  // required uint64 timestamp_us = 3;
  inline bool has_timestamp_us() const;
  inline void clear_timestamp_us();
  static const int kTimestampUsFieldNumber = 3;
  inline ::google::protobuf::uint64 timestamp_us() const;
  inline void set_timestamp_us(::google::protobuf::uint64 value);

  // optional int64 offset = 4;
  inline bool has_offset() const;
  inline void clear_offset();
  static const int kOffsetFieldNumber = 4;
  inline ::google::protobuf::int64 offset() const;
  inline void set_offset(::google::protobuf::int64 value);

  // optional int64 length = 5;
  inline bool has_length() const;
  inline void clear_length();
  static const int kLengthFieldNumber = 5;
  inline ::google::protobuf::int64 length() const;
  inline void set_length(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:ant.BlockRecordPB)
 private:
  inline void set_has_block_id();
  inline void clear_has_block_id();
  inline void set_has_op_type();
  inline void clear_has_op_type();
  inline void set_has_timestamp_us();
  inline void clear_has_timestamp_us();
  inline void set_has_offset();
  inline void clear_has_offset();
  inline void set_has_length();
  inline void clear_has_length();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::ant::BlockIdPB* block_id_;
  ::google::protobuf::uint64 timestamp_us_;
  ::google::protobuf::int64 offset_;
  ::google::protobuf::int64 length_;
  int op_type_;
  friend void  protobuf_AddDesc_mprmpr_2ffile_5fsystem_2ffile_5fsystem_2eproto();
  friend void protobuf_AssignDesc_mprmpr_2ffile_5fsystem_2ffile_5fsystem_2eproto();
  friend void protobuf_ShutdownFile_mprmpr_2ffile_5fsystem_2ffile_5fsystem_2eproto();

  void InitAsDefaultInstance();
  static BlockRecordPB* default_instance_;
};
// ===================================================================


// ===================================================================

// InstanceMetadataPB

// required bytes uuid = 1;
inline bool InstanceMetadataPB::has_uuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InstanceMetadataPB::set_has_uuid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InstanceMetadataPB::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InstanceMetadataPB::clear_uuid() {
  if (uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uuid_->clear();
  }
  clear_has_uuid();
}
inline const ::std::string& InstanceMetadataPB::uuid() const {
  // @@protoc_insertion_point(field_get:ant.InstanceMetadataPB.uuid)
  return *uuid_;
}
inline void InstanceMetadataPB::set_uuid(const ::std::string& value) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(value);
  // @@protoc_insertion_point(field_set:ant.InstanceMetadataPB.uuid)
}
inline void InstanceMetadataPB::set_uuid(const char* value) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(value);
  // @@protoc_insertion_point(field_set_char:ant.InstanceMetadataPB.uuid)
}
inline void InstanceMetadataPB::set_uuid(const void* value, size_t size) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ant.InstanceMetadataPB.uuid)
}
inline ::std::string* InstanceMetadataPB::mutable_uuid() {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uuid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ant.InstanceMetadataPB.uuid)
  return uuid_;
}
inline ::std::string* InstanceMetadataPB::release_uuid() {
  clear_has_uuid();
  if (uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = uuid_;
    uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void InstanceMetadataPB::set_allocated_uuid(::std::string* uuid) {
  if (uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uuid_;
  }
  if (uuid) {
    set_has_uuid();
    uuid_ = uuid;
  } else {
    clear_has_uuid();
    uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ant.InstanceMetadataPB.uuid)
}

// required string format_stamp = 2;
inline bool InstanceMetadataPB::has_format_stamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void InstanceMetadataPB::set_has_format_stamp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void InstanceMetadataPB::clear_has_format_stamp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void InstanceMetadataPB::clear_format_stamp() {
  if (format_stamp_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    format_stamp_->clear();
  }
  clear_has_format_stamp();
}
inline const ::std::string& InstanceMetadataPB::format_stamp() const {
  // @@protoc_insertion_point(field_get:ant.InstanceMetadataPB.format_stamp)
  return *format_stamp_;
}
inline void InstanceMetadataPB::set_format_stamp(const ::std::string& value) {
  set_has_format_stamp();
  if (format_stamp_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    format_stamp_ = new ::std::string;
  }
  format_stamp_->assign(value);
  // @@protoc_insertion_point(field_set:ant.InstanceMetadataPB.format_stamp)
}
inline void InstanceMetadataPB::set_format_stamp(const char* value) {
  set_has_format_stamp();
  if (format_stamp_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    format_stamp_ = new ::std::string;
  }
  format_stamp_->assign(value);
  // @@protoc_insertion_point(field_set_char:ant.InstanceMetadataPB.format_stamp)
}
inline void InstanceMetadataPB::set_format_stamp(const char* value, size_t size) {
  set_has_format_stamp();
  if (format_stamp_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    format_stamp_ = new ::std::string;
  }
  format_stamp_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ant.InstanceMetadataPB.format_stamp)
}
inline ::std::string* InstanceMetadataPB::mutable_format_stamp() {
  set_has_format_stamp();
  if (format_stamp_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    format_stamp_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ant.InstanceMetadataPB.format_stamp)
  return format_stamp_;
}
inline ::std::string* InstanceMetadataPB::release_format_stamp() {
  clear_has_format_stamp();
  if (format_stamp_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = format_stamp_;
    format_stamp_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void InstanceMetadataPB::set_allocated_format_stamp(::std::string* format_stamp) {
  if (format_stamp_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete format_stamp_;
  }
  if (format_stamp) {
    set_has_format_stamp();
    format_stamp_ = format_stamp;
  } else {
    clear_has_format_stamp();
    format_stamp_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ant.InstanceMetadataPB.format_stamp)
}

// -------------------------------------------------------------------

// PathSetPB

// required bytes uuid = 1;
inline bool PathSetPB::has_uuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PathSetPB::set_has_uuid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PathSetPB::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PathSetPB::clear_uuid() {
  if (uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uuid_->clear();
  }
  clear_has_uuid();
}
inline const ::std::string& PathSetPB::uuid() const {
  // @@protoc_insertion_point(field_get:ant.PathSetPB.uuid)
  return *uuid_;
}
inline void PathSetPB::set_uuid(const ::std::string& value) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(value);
  // @@protoc_insertion_point(field_set:ant.PathSetPB.uuid)
}
inline void PathSetPB::set_uuid(const char* value) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(value);
  // @@protoc_insertion_point(field_set_char:ant.PathSetPB.uuid)
}
inline void PathSetPB::set_uuid(const void* value, size_t size) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ant.PathSetPB.uuid)
}
inline ::std::string* PathSetPB::mutable_uuid() {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uuid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ant.PathSetPB.uuid)
  return uuid_;
}
inline ::std::string* PathSetPB::release_uuid() {
  clear_has_uuid();
  if (uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = uuid_;
    uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PathSetPB::set_allocated_uuid(::std::string* uuid) {
  if (uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uuid_;
  }
  if (uuid) {
    set_has_uuid();
    uuid_ = uuid;
  } else {
    clear_has_uuid();
    uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ant.PathSetPB.uuid)
}

// repeated bytes all_uuids = 2;
inline int PathSetPB::all_uuids_size() const {
  return all_uuids_.size();
}
inline void PathSetPB::clear_all_uuids() {
  all_uuids_.Clear();
}
inline const ::std::string& PathSetPB::all_uuids(int index) const {
  // @@protoc_insertion_point(field_get:ant.PathSetPB.all_uuids)
  return all_uuids_.Get(index);
}
inline ::std::string* PathSetPB::mutable_all_uuids(int index) {
  // @@protoc_insertion_point(field_mutable:ant.PathSetPB.all_uuids)
  return all_uuids_.Mutable(index);
}
inline void PathSetPB::set_all_uuids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ant.PathSetPB.all_uuids)
  all_uuids_.Mutable(index)->assign(value);
}
inline void PathSetPB::set_all_uuids(int index, const char* value) {
  all_uuids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ant.PathSetPB.all_uuids)
}
inline void PathSetPB::set_all_uuids(int index, const void* value, size_t size) {
  all_uuids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ant.PathSetPB.all_uuids)
}
inline ::std::string* PathSetPB::add_all_uuids() {
  return all_uuids_.Add();
}
inline void PathSetPB::add_all_uuids(const ::std::string& value) {
  all_uuids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ant.PathSetPB.all_uuids)
}
inline void PathSetPB::add_all_uuids(const char* value) {
  all_uuids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ant.PathSetPB.all_uuids)
}
inline void PathSetPB::add_all_uuids(const void* value, size_t size) {
  all_uuids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ant.PathSetPB.all_uuids)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
PathSetPB::all_uuids() const {
  // @@protoc_insertion_point(field_list:ant.PathSetPB.all_uuids)
  return all_uuids_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
PathSetPB::mutable_all_uuids() {
  // @@protoc_insertion_point(field_mutable_list:ant.PathSetPB.all_uuids)
  return &all_uuids_;
}

// -------------------------------------------------------------------

// PathInstanceMetadataPB

// required .ant.PathSetPB path_set = 1;
inline bool PathInstanceMetadataPB::has_path_set() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PathInstanceMetadataPB::set_has_path_set() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PathInstanceMetadataPB::clear_has_path_set() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PathInstanceMetadataPB::clear_path_set() {
  if (path_set_ != NULL) path_set_->::ant::PathSetPB::Clear();
  clear_has_path_set();
}
inline const ::ant::PathSetPB& PathInstanceMetadataPB::path_set() const {
  // @@protoc_insertion_point(field_get:ant.PathInstanceMetadataPB.path_set)
  return path_set_ != NULL ? *path_set_ : *default_instance_->path_set_;
}
inline ::ant::PathSetPB* PathInstanceMetadataPB::mutable_path_set() {
  set_has_path_set();
  if (path_set_ == NULL) path_set_ = new ::ant::PathSetPB;
  // @@protoc_insertion_point(field_mutable:ant.PathInstanceMetadataPB.path_set)
  return path_set_;
}
inline ::ant::PathSetPB* PathInstanceMetadataPB::release_path_set() {
  clear_has_path_set();
  ::ant::PathSetPB* temp = path_set_;
  path_set_ = NULL;
  return temp;
}
inline void PathInstanceMetadataPB::set_allocated_path_set(::ant::PathSetPB* path_set) {
  delete path_set_;
  path_set_ = path_set;
  if (path_set) {
    set_has_path_set();
  } else {
    clear_has_path_set();
  }
  // @@protoc_insertion_point(field_set_allocated:ant.PathInstanceMetadataPB.path_set)
}

// required string block_manager_type = 2;
inline bool PathInstanceMetadataPB::has_block_manager_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PathInstanceMetadataPB::set_has_block_manager_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PathInstanceMetadataPB::clear_has_block_manager_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PathInstanceMetadataPB::clear_block_manager_type() {
  if (block_manager_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    block_manager_type_->clear();
  }
  clear_has_block_manager_type();
}
inline const ::std::string& PathInstanceMetadataPB::block_manager_type() const {
  // @@protoc_insertion_point(field_get:ant.PathInstanceMetadataPB.block_manager_type)
  return *block_manager_type_;
}
inline void PathInstanceMetadataPB::set_block_manager_type(const ::std::string& value) {
  set_has_block_manager_type();
  if (block_manager_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    block_manager_type_ = new ::std::string;
  }
  block_manager_type_->assign(value);
  // @@protoc_insertion_point(field_set:ant.PathInstanceMetadataPB.block_manager_type)
}
inline void PathInstanceMetadataPB::set_block_manager_type(const char* value) {
  set_has_block_manager_type();
  if (block_manager_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    block_manager_type_ = new ::std::string;
  }
  block_manager_type_->assign(value);
  // @@protoc_insertion_point(field_set_char:ant.PathInstanceMetadataPB.block_manager_type)
}
inline void PathInstanceMetadataPB::set_block_manager_type(const char* value, size_t size) {
  set_has_block_manager_type();
  if (block_manager_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    block_manager_type_ = new ::std::string;
  }
  block_manager_type_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ant.PathInstanceMetadataPB.block_manager_type)
}
inline ::std::string* PathInstanceMetadataPB::mutable_block_manager_type() {
  set_has_block_manager_type();
  if (block_manager_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    block_manager_type_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ant.PathInstanceMetadataPB.block_manager_type)
  return block_manager_type_;
}
inline ::std::string* PathInstanceMetadataPB::release_block_manager_type() {
  clear_has_block_manager_type();
  if (block_manager_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = block_manager_type_;
    block_manager_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PathInstanceMetadataPB::set_allocated_block_manager_type(::std::string* block_manager_type) {
  if (block_manager_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete block_manager_type_;
  }
  if (block_manager_type) {
    set_has_block_manager_type();
    block_manager_type_ = block_manager_type;
  } else {
    clear_has_block_manager_type();
    block_manager_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ant.PathInstanceMetadataPB.block_manager_type)
}

// required uint64 filesystem_block_size_bytes = 3;
inline bool PathInstanceMetadataPB::has_filesystem_block_size_bytes() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PathInstanceMetadataPB::set_has_filesystem_block_size_bytes() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PathInstanceMetadataPB::clear_has_filesystem_block_size_bytes() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PathInstanceMetadataPB::clear_filesystem_block_size_bytes() {
  filesystem_block_size_bytes_ = GOOGLE_ULONGLONG(0);
  clear_has_filesystem_block_size_bytes();
}
inline ::google::protobuf::uint64 PathInstanceMetadataPB::filesystem_block_size_bytes() const {
  // @@protoc_insertion_point(field_get:ant.PathInstanceMetadataPB.filesystem_block_size_bytes)
  return filesystem_block_size_bytes_;
}
inline void PathInstanceMetadataPB::set_filesystem_block_size_bytes(::google::protobuf::uint64 value) {
  set_has_filesystem_block_size_bytes();
  filesystem_block_size_bytes_ = value;
  // @@protoc_insertion_point(field_set:ant.PathInstanceMetadataPB.filesystem_block_size_bytes)
}

// -------------------------------------------------------------------

// BlockIdPB

// required fixed64 id = 1;
inline bool BlockIdPB::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BlockIdPB::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BlockIdPB::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BlockIdPB::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 BlockIdPB::id() const {
  // @@protoc_insertion_point(field_get:ant.BlockIdPB.id)
  return id_;
}
inline void BlockIdPB::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:ant.BlockIdPB.id)
}

// -------------------------------------------------------------------

// BlockRecordPB

// required .ant.BlockIdPB block_id = 1;
inline bool BlockRecordPB::has_block_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BlockRecordPB::set_has_block_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BlockRecordPB::clear_has_block_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BlockRecordPB::clear_block_id() {
  if (block_id_ != NULL) block_id_->::ant::BlockIdPB::Clear();
  clear_has_block_id();
}
inline const ::ant::BlockIdPB& BlockRecordPB::block_id() const {
  // @@protoc_insertion_point(field_get:ant.BlockRecordPB.block_id)
  return block_id_ != NULL ? *block_id_ : *default_instance_->block_id_;
}
inline ::ant::BlockIdPB* BlockRecordPB::mutable_block_id() {
  set_has_block_id();
  if (block_id_ == NULL) block_id_ = new ::ant::BlockIdPB;
  // @@protoc_insertion_point(field_mutable:ant.BlockRecordPB.block_id)
  return block_id_;
}
inline ::ant::BlockIdPB* BlockRecordPB::release_block_id() {
  clear_has_block_id();
  ::ant::BlockIdPB* temp = block_id_;
  block_id_ = NULL;
  return temp;
}
inline void BlockRecordPB::set_allocated_block_id(::ant::BlockIdPB* block_id) {
  delete block_id_;
  block_id_ = block_id;
  if (block_id) {
    set_has_block_id();
  } else {
    clear_has_block_id();
  }
  // @@protoc_insertion_point(field_set_allocated:ant.BlockRecordPB.block_id)
}

// required .ant.BlockRecordType op_type = 2;
inline bool BlockRecordPB::has_op_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BlockRecordPB::set_has_op_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BlockRecordPB::clear_has_op_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BlockRecordPB::clear_op_type() {
  op_type_ = 0;
  clear_has_op_type();
}
inline ::ant::BlockRecordType BlockRecordPB::op_type() const {
  // @@protoc_insertion_point(field_get:ant.BlockRecordPB.op_type)
  return static_cast< ::ant::BlockRecordType >(op_type_);
}
inline void BlockRecordPB::set_op_type(::ant::BlockRecordType value) {
  assert(::ant::BlockRecordType_IsValid(value));
  set_has_op_type();
  op_type_ = value;
  // @@protoc_insertion_point(field_set:ant.BlockRecordPB.op_type)
}

// required uint64 timestamp_us = 3;
inline bool BlockRecordPB::has_timestamp_us() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BlockRecordPB::set_has_timestamp_us() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BlockRecordPB::clear_has_timestamp_us() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BlockRecordPB::clear_timestamp_us() {
  timestamp_us_ = GOOGLE_ULONGLONG(0);
  clear_has_timestamp_us();
}
inline ::google::protobuf::uint64 BlockRecordPB::timestamp_us() const {
  // @@protoc_insertion_point(field_get:ant.BlockRecordPB.timestamp_us)
  return timestamp_us_;
}
inline void BlockRecordPB::set_timestamp_us(::google::protobuf::uint64 value) {
  set_has_timestamp_us();
  timestamp_us_ = value;
  // @@protoc_insertion_point(field_set:ant.BlockRecordPB.timestamp_us)
}

// optional int64 offset = 4;
inline bool BlockRecordPB::has_offset() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BlockRecordPB::set_has_offset() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BlockRecordPB::clear_has_offset() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BlockRecordPB::clear_offset() {
  offset_ = GOOGLE_LONGLONG(0);
  clear_has_offset();
}
inline ::google::protobuf::int64 BlockRecordPB::offset() const {
  // @@protoc_insertion_point(field_get:ant.BlockRecordPB.offset)
  return offset_;
}
inline void BlockRecordPB::set_offset(::google::protobuf::int64 value) {
  set_has_offset();
  offset_ = value;
  // @@protoc_insertion_point(field_set:ant.BlockRecordPB.offset)
}

// optional int64 length = 5;
inline bool BlockRecordPB::has_length() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BlockRecordPB::set_has_length() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BlockRecordPB::clear_has_length() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BlockRecordPB::clear_length() {
  length_ = GOOGLE_LONGLONG(0);
  clear_has_length();
}
inline ::google::protobuf::int64 BlockRecordPB::length() const {
  // @@protoc_insertion_point(field_get:ant.BlockRecordPB.length)
  return length_;
}
inline void BlockRecordPB::set_length(::google::protobuf::int64 value) {
  set_has_length();
  length_ = value;
  // @@protoc_insertion_point(field_set:ant.BlockRecordPB.length)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ant

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::ant::BlockRecordType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ant::BlockRecordType>() {
  return ::ant::BlockRecordType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_mprmpr_2ffile_5fsystem_2ffile_5fsystem_2eproto__INCLUDED
